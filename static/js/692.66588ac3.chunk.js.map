{"version":3,"file":"static/js/692.66588ac3.chunk.js","mappings":"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","sources":["actions/crud/get/index.js","components/ProgressBar/index.js","components/Header/index.js","components/SearchField/index.js","constants/crud/get/index.js","constants/index.js","containers/CoinDetail/keys.js","utils/formatter.js","components/BarChart/index.js","containers/CoinDetail/saga.js","containers/CoinDetail/index.js","selectors/crud/get/index.js","hooks/crud/get/useCrudGet.js","reducers/crud/get/index.js","utils/checkStore.js","utils/reducerInjectors.js","utils/injectReducer.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js","utils/request.js"],"sourcesContent":["import GET from '../../../constants';\n\nconst crudGetOneAction = (key, payload) => ({\n    key,\n    type: `${GET.ONE.KEY}${key}`,\n    payload,\n});\n\nconst crudGetAllAction = (key, payload) => ({\n    key,\n    type: `${GET.ALL.KEY}${key}`,\n    payload,\n});\n\nconst crudGetListAction = (key, payload) => ({\n    key,\n    type: `${GET.LIST.KEY}${key}`,\n    payload,\n});\n\nconst crudGetListSuccessAction = (key, payload) => ({\n    key,\n    type: `${GET.LIST.SUCCESS.KEY}${key}`,\n    payload,\n});\nconst crudGetOneSuccessAction = (key, payload) => ({\n    key,\n    type: `${GET.ONE.SUCCESS.KEY}${key}`,\n    payload,\n});\nconst crudGetAllSuccessAction = (key, payload) => ({\n    key,\n    type: `${GET.ALL.SUCCESS.KEY}${key}`,\n    payload,\n});\n\nconst crudGetListFailureAction = (key, payload) => ({\n    key,\n    type: `${GET.LIST.FAILURE.KEY}${key}`,\n    payload,\n});\n\nconst crudGetOneFailureAction = (key, payload) => ({\n    key,\n    type: `${GET.ONE.FAILURE.KEY}${key}`,\n    payload,\n});\n\nconst crudGetAllFailureAction = (key, payload) => ({\n    key,\n    type: `${GET.ALL.FAILURE.KEY}${key}`,\n    payload,\n});\n\nconst crudGetResetAction = (key) => ({\n    key,\n    type: `${GET.RESET.KEY}${key}`,\n});\nexport {\n    crudGetOneAction,\n    crudGetAllAction,\n    crudGetListAction,\n    crudGetListSuccessAction,\n    crudGetOneSuccessAction,\n    crudGetAllSuccessAction,\n    crudGetListFailureAction,\n    crudGetOneFailureAction,\n    crudGetAllFailureAction,\n    crudGetResetAction,\n};\n","import React from 'react';\nimport './styles.css';\n\nfunction ProgressBar() {\n    return (\n        <div data-testid=\"progressBar\" className=\"mw-100\">\n            <span className=\"progress-root\">\n                <span className=\"animated1\" />\n                <span className=\"animated2\" />\n            </span>\n        </div>\n    );\n}\nexport default ProgressBar;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-regular-svg-icons/faUser';\nimport { faHouse } from '@fortawesome/free-solid-svg-icons/faHouse';\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\nimport SearchField from '../SearchField';\nimport ProgressBar from '../ProgressBar';\n\nfunction Header({ showProgress }) {\n    return (\n        <div data-testid=\"Header\">\n            <nav data-testid=\"navbar\" className=\"navbar navbar-expand navbar-dark bg-dark\">\n                <a data-testid=\"homeLink\" className=\"navbar-brand ps-3\" href=\"/\">\n                    <FontAwesomeIcon icon={faHouse} className=\"fa-fw me-2\" />\n                    Crypto Coin\n                </a>\n                <SearchField />\n                <ul data-testid=\"userProfileLink\" className=\"navbar-nav ms-auto ms-md-0 me-3 me-lg-4\">\n                    <li className=\"nav-item dropdown\">\n                        <a\n                            className=\"nav-link dropdown-toggle\"\n                            href=\"#\"\n                            role=\"button\"\n                            data-bs-toggle=\"dropdown\"\n                            aria-expanded=\"false\"\n                        >\n                            <FontAwesomeIcon icon={faUser} className=\"fa-fw\" />\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n            {showProgress && <ProgressBar />}\n        </div>\n    );\n}\nHeader.propTypes = {\n    showProgress: PropTypes.bool,\n};\nHeader.defaultProps = {\n    showProgress: false,\n};\nexport default Header;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons/faSearch';\n\nfunction SearchField({ onSearch }) {\n    const [value, setValue] = useState('');\n    const handleSearch = (event) => {\n        setValue(event.target.value);\n        onSearch(event.target.value);\n    };\n    return (\n        <form\n            data-testid=\"search-field-form\"\n            className=\"d-none d-md-inline-block form-inline ms-auto me-0 me-md-3 my-2 my-md-0\"\n        >\n            <div className=\"input-group\">\n                <input\n                    data-testid=\"search-field-input\"\n                    value={value}\n                    onChange={handleSearch}\n                    className=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"Search for...\"\n                    aria-label=\"Search for...\"\n                    aria-describedby=\"btnNavbarSearch\"\n                />\n                <button\n                    data-testid=\"search-field-button\"\n                    className=\"btn btn-primary\"\n                    id=\"btnNavbarSearch\"\n                    type=\"button\"\n                >\n                    <FontAwesomeIcon icon={faSearch} />\n                </button>\n            </div>\n        </form>\n    );\n}\nSearchField.propTypes = {\n    onSearch: PropTypes.func,\n};\nSearchField.defaultProps = {\n    onSearch: (value) => value,\n};\n\nexport default SearchField;\n","const KEY = `/CRUD/GET`;\n\nconst GET = {\n    ALL: {\n        KEY: `${KEY}/ALL/`,\n        FAILURE: { KEY: `${KEY}/ALL/FAILURE/` },\n        SUCCESS: { KEY: `${KEY}/ALL/SUCCESS/` },\n    },\n    LIST: {\n        KEY: `${KEY}/LIST/`,\n        FAILURE: { KEY: `${KEY}/LIST/FAILURE/` },\n        SUCCESS: { KEY: `${KEY}/LIST/SUCCESS/` },\n    },\n    ONE: {\n        KEY: `${KEY}/ONE/`,\n        FAILURE: { KEY: `${KEY}/ONE/FAILURE/` },\n        SUCCESS: { KEY: `${KEY}/ONE/SUCCESS/` },\n    },\n    RESET: {\n        KEY: `${KEY}/RESET/`,\n    },\n};\n\nexport default GET;\n","import GET from './crud/get';\n\nexport default GET;\n","const KEYS = {\n    COIN: {\n        DETAIL: `COIN_DETAIL`,\n        TOP10MARKETS: `TOP_10_MARKETS`,\n    },\n};\n\nexport default KEYS;\n","const dataFormatter = (number) => {\n    if (number > 1000000000) {\n        return `${(number / 1000000000).toString()} B`;\n    }\n\n    if (number > 1000000) {\n        return `${(number / 1000000).toString()} M`;\n    }\n\n    if (number > 1000) {\n        return `${(number / 1000).toString()} K`;\n    }\n    return number.toString();\n};\nexport default dataFormatter;\n","import _ from 'lodash';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ComposedChart, XAxis, YAxis, Bar, Legend, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';\nimport dataFormatter from '../../utils/formatter';\n\nfunction BarChart({ data, height, barConfig, tooltip, xAxisFormatterType, xAxisDataKey }) {\n    const [disabled] = useState([]);\n    const payload = _.toPairs(barConfig).map((pair) => ({\n        dataKey: pair[0],\n        color: pair[1].fill,\n        value: pair[1].name,\n    }));\n\n    return (\n        <ResponsiveContainer width=\"100%\" height={height}>\n            <ComposedChart height={height} data={data}>\n                <XAxis\n                    dataKey={xAxisDataKey}\n                    style={{ fontSize: '10px', fontWeight: '700' }}\n                    tickFormatter={xAxisFormatterType.toLowerCase()}\n                    padding={{ left: 10, right: 30 }}\n                    color=\"#e31958\"\n                />\n                <YAxis style={{ fontSize: '10px', fontWeight: '700' }} tickFormatter={dataFormatter} />\n\n                <Legend\n                    layout=\"horizontal\"\n                    verticalAlign=\"top\"\n                    align=\"left\"\n                    payload={payload}\n                    wrapperStyle={{\n                        fontSize: '12px',\n                        top: 0,\n                        left: 0,\n                        marginTop: -20,\n                        transform: 'translate(1, 0)',\n                    }}\n                />\n\n                <CartesianGrid fill=\"#f8fafa\" fillOpacity={1} horizontal={false} vertical={false} />\n\n                {_.toPairs(barConfig)\n                    .filter((pair) => !_.includes(disabled, pair[0]))\n                    .map((pair) => {\n                        const key = new Date().getMilliseconds() + Math.random();\n                        return (\n                            <Bar\n                                dataKey={null}\n                                key={key}\n                                stackId={pair[1].stack}\n                                background={{ fill: '#FFFFFF' }}\n                                maxBarSize={50}\n                            />\n                        );\n                    })}\n                {_.toPairs(barConfig)\n                    .filter((pair) => !_.includes(disabled, pair[0]))\n                    .map((pair) => {\n                        const key = new Date().getMilliseconds() + Math.random();\n                        return (\n                            <Bar\n                                key={key}\n                                name={pair[1].name}\n                                dataKey={pair[1].dataKey}\n                                stackId={pair[1].stack}\n                                fill={pair[1].fill}\n                                fillOpacity={1}\n                                maxBarSize={50}\n                            />\n                        );\n                    })}\n\n                {tooltip && <Tooltip />}\n            </ComposedChart>\n        </ResponsiveContainer>\n    );\n}\nBarChart.propTypes = {\n    // eslint-disable-next-line react/forbid-prop-types\n    data: PropTypes.array.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.bool,\n    barConfig: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            dataKey: PropTypes.string.isRequired,\n            fill: PropTypes.string.isRequired,\n            stack: PropTypes.string.isRequired,\n        }),\n    ),\n    xAxisDataKey: PropTypes.string,\n    xAxisFormatterType: PropTypes.oneOf(['hour', 'month', 'days', 'name']),\n};\n\nBarChart.defaultProps = {\n    tooltip: false,\n    xAxisDataKey: 'date',\n    xAxisFormatterType: 'name',\n    barConfig: [],\n};\n\nexport default BarChart;\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport lodash from 'lodash';\n\nimport KEYS from './keys';\nimport GET from '../../constants';\nimport request from '../../utils/request';\nimport {\n    crudGetOneFailureAction,\n    crudGetOneSuccessAction,\n    crudGetAllFailureAction,\n    crudGetAllSuccessAction,\n} from '../../actions/crud/get';\n\nfunction* getCoinDetail(action) {\n    try {\n        const { id } = action.payload;\n        const URL = `https://api.coinlore.net/api/ticker/?id=${id}`;\n        const result = yield call(request, URL);\n        if (result.error) {\n            yield put(crudGetOneFailureAction(action.key, { error: result.error }));\n        } else if (result.data) {\n            yield put(crudGetOneSuccessAction(action.key, { data: result.data[0], success: true }));\n        }\n    } catch (error) {\n        yield put(crudGetOneFailureAction(action.key, { error }));\n    }\n}\n\nfunction* getTop10MarketsForCoin(action) {\n    try {\n        const { id } = action.payload;\n        const URL = `https://api.coinlore.net/api/coin/markets/?id=${id}`;\n        const result = yield call(request, URL);\n        if (result.error) {\n            yield put(crudGetAllFailureAction(action.key, { error: result.error }));\n        } else if (result.data) {\n            const data = lodash.orderBy(result.data, ['volume'], ['desc']).slice(0, 10);\n            yield put(crudGetAllSuccessAction(action.key, { data, success: true }));\n        }\n    } catch (error) {\n        yield put(crudGetAllFailureAction(action.key, { error }));\n    }\n}\n\nexport function* getCoinDetailSaga() {\n    yield takeLatest(`${GET.ONE.KEY}${KEYS.COIN.DETAIL}`, getCoinDetail);\n}\n\nexport function* getTop10MarketsForCoinSaga() {\n    yield takeLatest(`${GET.ALL.KEY}${KEYS.COIN.TOP10MARKETS}`, getTop10MarketsForCoin);\n}\n","import React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useParams } from 'react-router-dom';\nimport { faChartSimple } from '@fortawesome/free-solid-svg-icons/faChartSimple';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDollar } from '@fortawesome/free-solid-svg-icons/faDollar';\n\nimport KEYS from './keys';\n\nimport Header from '../../components/Header';\nimport BarChart from '../../components/BarChart';\nimport crudGetReducer from '../../reducers/crud/get';\nimport { InjectReducer, InjectSaga } from '../../utils';\nimport useCrudGet from '../../hooks/crud/get/useCrudGet';\nimport { getCoinDetailSaga, getTop10MarketsForCoinSaga } from './saga';\n\nconst graphConfig = [\n    {\n        name: 'Volume',\n        dataKey: 'volume',\n        fill: '#2347F3',\n        stack: '0',\n    },\n];\n\nfunction CoinDetail() {\n    const { coinId } = useParams();\n\n    const getCoinDetailsReducer = crudGetReducer(KEYS.COIN.DETAIL);\n    InjectReducer({ key: KEYS.COIN.DETAIL, reducer: getCoinDetailsReducer });\n    InjectSaga({ key: KEYS.COIN.DETAIL, saga: getCoinDetailSaga });\n\n    const getTop10MarketsReducer = crudGetReducer(KEYS.COIN.TOP10MARKETS);\n    InjectReducer({ key: KEYS.COIN.TOP10MARKETS, reducer: getTop10MarketsReducer });\n    InjectSaga({ key: KEYS.COIN.TOP10MARKETS, saga: getTop10MarketsForCoinSaga });\n\n    const {\n        crudGetOne: getCoinDetail,\n        crudGetOnePayload,\n        crudGetOneLoading,\n        crudGetOneSuccess,\n    } = useCrudGet(KEYS.COIN.DETAIL);\n\n    const {\n        crudGetAll: getTop10MarketByCoinId,\n        crudGetAllPayload,\n        crudGetAllLoading,\n        crudGetAllSuccess,\n    } = useCrudGet(KEYS.COIN.TOP10MARKETS);\n\n    const [top10Markets, setTop10Markets] = useState(null);\n    const [coinDetail, setCoinDetail] = useState(null);\n\n    useEffect(() => {\n        if (crudGetOnePayload == null && crudGetAllPayload == null && !crudGetAllLoading && !crudGetOneLoading) {\n            getCoinDetail({ id: coinId });\n            getTop10MarketByCoinId({ id: coinId });\n        }\n    }, [\n        coinId,\n        crudGetAllLoading,\n        crudGetAllPayload,\n        crudGetOneLoading,\n        crudGetOnePayload,\n        getCoinDetail,\n        getTop10MarketByCoinId,\n    ]);\n\n    useEffect(() => {\n        if (crudGetOneSuccess) {\n            setCoinDetail(crudGetOnePayload.data);\n        }\n    }, [crudGetOnePayload, crudGetOneSuccess]);\n\n    useEffect(() => {\n        if (crudGetAllSuccess) {\n            setTop10Markets(crudGetAllPayload.data);\n        }\n    }, [crudGetAllPayload, crudGetAllSuccess]);\n\n    return (\n        <div data-testid=\"CoinDetail\">\n            <Header showProgress={crudGetOneLoading || crudGetAllLoading} />\n            <div data-testid=\"container\" className=\"container-fluid px-4 small\">\n                {coinDetail && top10Markets && (\n                    <div className=\"row\">\n                        <div className=\"col-xl-7 col-md-6 mt-4\">\n                            <div data-testid=\"TitleCard\" className=\"row card card-body flex-row\">\n                                <div className=\"col-xl-10 col-md-8\">\n                                    <img\n                                        className=\"px-1 rounded-circle\"\n                                        src={`https://www.coinlore.com/img/25x25/${coinDetail.nameid}.png`}\n                                        alt={coinDetail.symbol}\n                                    />\n                                    <strong data-testid=\"coin_symbol\">{coinDetail.symbol}</strong> Price / Everything\n                                    About <strong data-testid=\"coin_name\">{coinDetail.name}</strong>\n                                </div>\n                                <div className=\"text-end align-self-end col-xl-2 col-md-4\">\n                                    Rank:{' '}\n                                    <div\n                                        data-testid=\"coin_rank\"\n                                        className={coinDetail.rank <= 10 ? `badge bg-success` : `badge bg-primary`}\n                                    >\n                                        {coinDetail.rank}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card row mt-4\">\n                                <div className=\"card-body table-responsive\">\n                                    <table className=\"table table-sm\">\n                                        <thead>\n                                            <tr>\n                                                <th>Market Cap</th>\n                                                <th>Vol (24H)</th>\n                                                <th>Circulating Supply</th>\n                                                <th>Total Supply</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr>\n                                                <td>${coinDetail.market_cap_usd}</td>\n                                                <td>\n                                                    <div>${coinDetail.volume24}</div>\n                                                    <div className=\"text-secondary small\">\n                                                        {coinDetail.volume24_native}\n                                                        <strong> {coinDetail.symbol}</strong>\n                                                    </div>\n                                                </td>\n                                                <td data-testid=\"csupply\">${coinDetail.csupply}</td>\n                                                <td data-testid=\"tsupply\">${coinDetail.tsupply}</td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                            <div className=\"row d-flex align-content-between\">\n                                <div className=\"col-xl-3 col-md-6 mt-4 pe-1 ps-0\">\n                                    <div className=\"card\">\n                                        <div className=\"card-body\">\n                                            <div className=\"card-header\">\n                                                <FontAwesomeIcon icon={faDollar} className=\"me-1\" />\n                                                <strong>Price</strong>\n                                            </div>\n                                            <div className=\"list-group-flush\">\n                                                <div className=\"list-group-item\">\n                                                    <span>USD: </span>\n                                                    <span data-testid=\"price_usd\" className=\"text-primary small\">\n                                                        ${coinDetail.price_usd}\n                                                    </span>\n                                                </div>\n                                                <div className=\"list-group-item\">\n                                                    <span>BTC: </span>\n                                                    <span data-testid=\"price_btc\" className=\"text-primary small\">\n                                                        {coinDetail.price_btc} <small>(BTC)</small>\n                                                    </span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"card card-body col-xl-9 col-md-12 mt-4\">\n                                    <table className=\"table table-striped table-bordered table-hover table-sm\">\n                                        <thead>\n                                            <tr>\n                                                <th>VS</th>\n                                                <th>1h</th>\n                                                <th>24h</th>\n                                                <th>7d</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr>\n                                                <td>USD</td>\n                                                <td\n                                                    data-testid=\"percent_change_1h\"\n                                                    className={\n                                                        coinDetail.percent_change_1h > 0\n                                                            ? `text-success`\n                                                            : `text-danger`\n                                                    }\n                                                >\n                                                    {coinDetail.percent_change_1h}%\n                                                </td>\n                                                <td\n                                                    data-testid=\"percent_change_24h\"\n                                                    className={\n                                                        coinDetail.percent_change_24h > 0\n                                                            ? `text-success`\n                                                            : `text-danger`\n                                                    }\n                                                >\n                                                    {coinDetail.percent_change_24h}%\n                                                </td>\n                                                <td\n                                                    data-testid=\"percent_change_7d\"\n                                                    className={\n                                                        coinDetail.percent_change_7d > 0\n                                                            ? `text-success`\n                                                            : `text-danger`\n                                                    }\n                                                >\n                                                    {coinDetail.percent_change_7d}%\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-xl-5 col-md-6 mt-4\">\n                            <div className=\"card mb-4\">\n                                <div className=\"card-header\">\n                                    <FontAwesomeIcon icon={faChartSimple} className=\"me-1\" />\n                                    Top 10 Markets for {coinDetail.name}({coinDetail.symbol})\n                                </div>\n                                <div data-testid=\"top10Markets\" className=\"card-body flex-row pt-4\">\n                                    <BarChart\n                                        width={600}\n                                        height={268}\n                                        data={top10Markets}\n                                        barConfig={graphConfig}\n                                        tooltip\n                                        xAxisDataKey=\"name\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\nexport default CoinDetail;\n","import { createSelector } from 'reselect';\nimport { getInitialState } from '../../../reducers/crud/get';\n\nconst selectGetData = (state, key) => state[key] || getInitialState;\n\nconst makeSelectCrudGetListFailure = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.list.failure,\n    );\n\nconst makeSelectCrudGetOneFailure = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.one.failure,\n    );\n\nconst makeSelectCrudGetAllFailure = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.all.failure,\n    );\n\nconst makeSelectCrudGetListSuccess = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.list.success,\n    );\n\nconst makeSelectCrudGetOneSuccess = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.one.success,\n    );\n\nconst makeSelectCrudGetAllSuccess = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.all.success,\n    );\n\nconst makeSelectCrudGetListLoading = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.list.loading,\n    );\n\nconst makeSelectCrudGetAllLoading = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.all.loading,\n    );\n\nconst makeSelectCrudGetOneLoading = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.one.loading,\n    );\n\nconst makeSelectCrudGetListPayload = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.list.payload,\n    );\n\nconst makeSelectCrudGetOnePayload = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.one.payload,\n    );\n\nconst makeSelectCrudGetAllPayload = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.all.payload,\n    );\n\nexport {\n    makeSelectCrudGetListFailure,\n    makeSelectCrudGetOneFailure,\n    makeSelectCrudGetAllFailure,\n    makeSelectCrudGetListSuccess,\n    makeSelectCrudGetOneSuccess,\n    makeSelectCrudGetAllSuccess,\n    makeSelectCrudGetListLoading,\n    makeSelectCrudGetAllLoading,\n    makeSelectCrudGetOneLoading,\n    makeSelectCrudGetListPayload,\n    makeSelectCrudGetOnePayload,\n    makeSelectCrudGetAllPayload,\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport {\n    makeSelectCrudGetListPayload,\n    makeSelectCrudGetOnePayload,\n    makeSelectCrudGetAllPayload,\n    makeSelectCrudGetListFailure,\n    makeSelectCrudGetOneFailure,\n    makeSelectCrudGetAllFailure,\n    makeSelectCrudGetListSuccess,\n    makeSelectCrudGetOneSuccess,\n    makeSelectCrudGetAllSuccess,\n    makeSelectCrudGetListLoading,\n    makeSelectCrudGetAllLoading,\n    makeSelectCrudGetOneLoading,\n} from '../../../selectors/crud/get';\n\nimport { crudGetOneAction, crudGetAllAction, crudGetListAction, crudGetResetAction } from '../../../actions/crud/get';\n\nfunction useCrudGet(key) {\n    const dispatch = useDispatch();\n\n    const selectCrudGetListPayload = makeSelectCrudGetListPayload(key);\n    const selectCrudGetOnePayload = makeSelectCrudGetOnePayload(key);\n    const selectCrudGetAllPayload = makeSelectCrudGetAllPayload(key);\n    const selectCrudGetListFailure = makeSelectCrudGetListFailure(key);\n    const selectCrudGetOneFailure = makeSelectCrudGetOneFailure(key);\n    const selectCrudGetAllFailure = makeSelectCrudGetAllFailure(key);\n    const selectCrudGetListSuccess = makeSelectCrudGetListSuccess(key);\n    const selectCrudGetOneSuccess = makeSelectCrudGetOneSuccess(key);\n    const selectCrudGetAllSuccess = makeSelectCrudGetAllSuccess(key);\n    const selectCrudGetListLoading = makeSelectCrudGetListLoading(key);\n    const selectCrudGetAllLoading = makeSelectCrudGetAllLoading(key);\n    const selectCrudGetOneLoading = makeSelectCrudGetOneLoading(key);\n\n    const crudGetListPayload = useSelector(selectCrudGetListPayload);\n    const crudGetAllPayload = useSelector(selectCrudGetAllPayload);\n    const crudGetOnePayload = useSelector(selectCrudGetOnePayload);\n    const crudGetAllSuccess = useSelector(selectCrudGetAllSuccess);\n    const crudGetListSuccess = useSelector(selectCrudGetListSuccess);\n    const crudGetOneSuccess = useSelector(selectCrudGetOneSuccess);\n    const crudGetAllFailure = useSelector(selectCrudGetAllFailure);\n    const crudGetListFailure = useSelector(selectCrudGetListFailure);\n    const crudGetOneFailure = useSelector(selectCrudGetOneFailure);\n    const crudGetListLoading = useSelector(selectCrudGetListLoading);\n    const crudGetAllLoading = useSelector(selectCrudGetAllLoading);\n    const crudGetOneLoading = useSelector(selectCrudGetOneLoading);\n\n    const crudGetOne = (payload) => {\n        dispatch(crudGetOneAction(key, payload));\n    };\n    const crudGetAll = (payload) => {\n        dispatch(crudGetAllAction(key, payload));\n    };\n    const crudGetList = (payload) => {\n        dispatch(crudGetListAction(key, payload));\n    };\n    const crudGetReset = () => {\n        dispatch(crudGetResetAction(key));\n    };\n\n    return {\n        crudGetOne,\n        crudGetAll,\n        crudGetList,\n        crudGetReset,\n        crudGetOnePayload,\n        crudGetListPayload,\n        crudGetAllPayload,\n        crudGetOneLoading,\n        crudGetAllLoading,\n        crudGetListLoading,\n        crudGetOneFailure,\n        crudGetAllFailure,\n        crudGetListFailure,\n        crudGetOneSuccess,\n        crudGetAllSuccess,\n        crudGetListSuccess,\n    };\n}\n\nexport default useCrudGet;\n","import produce from 'immer';\nimport GET from '../../../constants/crud/get';\n\nexport const getInitialState = {\n    get: {\n        all: {\n            payload: null,\n            loading: false,\n            success: false,\n            failure: false,\n        },\n        list: {\n            payload: null,\n            loading: false,\n            success: false,\n            failure: false,\n        },\n        one: {\n            payload: null,\n            loading: false,\n            success: false,\n            failure: false,\n        },\n    },\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst crudGetReducer =\n    (reducerKey = '') =>\n    // eslint-disable-next-line default-param-last\n    (state = getInitialState, action) => {\n        const { key } = action;\n        if (key !== reducerKey) return state;\n        return produce(state, (draft) => {\n            switch (action.type) {\n                case `${GET.ONE.KEY}${key}`: {\n                    draft.get.one.payload = action.payload;\n                    draft.get.one.loading = true;\n                    draft.get.one.success = false;\n                    draft.get.one.failure = false;\n                    break;\n                }\n                case `${GET.ALL.KEY}${key}`: {\n                    draft.get.all.payload = action.payload;\n                    draft.get.all.loading = true;\n                    draft.get.all.success = false;\n                    draft.get.all.failure = false;\n                    break;\n                }\n                case `${GET.LIST.KEY}${key}`: {\n                    draft.get.list.payload = action.payload;\n                    draft.get.list.loading = true;\n                    draft.get.list.success = false;\n                    draft.get.list.failure = false;\n                    break;\n                }\n                case `${GET.LIST.SUCCESS.KEY}${key}`: {\n                    draft.get.list.payload = action.payload;\n                    draft.get.list.success = true;\n                    draft.get.list.loading = false;\n                    draft.get.list.failure = false;\n                    break;\n                }\n                case `${GET.ONE.SUCCESS.KEY}${key}`: {\n                    draft.get.one.payload = action.payload;\n                    draft.get.one.success = true;\n                    draft.get.one.loading = false;\n                    draft.get.one.failure = false;\n                    break;\n                }\n                case `${GET.ALL.SUCCESS.KEY}${key}`: {\n                    draft.get.all.payload = action.payload;\n                    draft.get.all.success = true;\n                    draft.get.all.loading = false;\n                    draft.get.all.failure = false;\n                    break;\n                }\n                case `${GET.LIST.FAILURE.KEY}${key}`: {\n                    draft.get.list.payload = action.payload;\n                    draft.get.list.failure = true;\n                    draft.get.list.loading = false;\n                    draft.get.list.success = false;\n                    break;\n                }\n                case `${GET.ONE.FAILURE.KEY}${key}`: {\n                    draft.get.one.payload = action.payload;\n                    draft.get.one.failure = true;\n                    draft.get.one.loading = false;\n                    draft.get.one.success = false;\n                    break;\n                }\n                case `${GET.ALL.FAILURE.KEY}${key}`: {\n                    draft.get.all.payload = action.payload;\n                    draft.get.all.failure = true;\n                    draft.get.all.loading = false;\n                    draft.get.all.success = false;\n                    break;\n                }\n                case `${GET.RESET.KEY}${key}`: {\n                    draft.get.all.payload = null;\n                    draft.get.all.failure = false;\n                    draft.get.all.loading = false;\n                    draft.get.all.success = false;\n\n                    draft.get.list.payload = null;\n                    draft.get.list.failure = false;\n                    draft.get.list.loading = false;\n                    draft.get.list.success = false;\n\n                    draft.get.one.payload = null;\n                    draft.get.one.failure = false;\n                    draft.get.one.loading = false;\n                    draft.get.one.success = false;\n                    break;\n                }\n            }\n        });\n    };\n\nexport default crudGetReducer;\n","import { conformsTo, isFunction, isObject } from 'lodash';\nimport invariant from 'invariant';\n\n/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n    const shape = {\n        dispatch: isFunction,\n        subscribe: isFunction,\n        getState: isFunction,\n        replaceReducer: isFunction,\n        runSaga: isFunction,\n        injectedReducers: isObject,\n        injectedSagas: isObject,\n    };\n    invariant(conformsTo(store, shape), '(app/utils...) injectors: Expected a valid redux store');\n}\n","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\nimport checkStore from './checkStore';\nimport createReducer from './rootReducer';\n\nexport function injectReducerFactory(store, isValid) {\n    return function injectReducer(key, reducer) {\n        if (!isValid) checkStore(store);\n\n        invariant(\n            isString(key) && !isEmpty(key) && isFunction(reducer),\n            '(src/utils...) injectReducer: Expected `reducer` to be a reducer function',\n        );\n\n        // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n        if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\n\n        store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n        store.replaceReducer(createReducer(store.injectedReducers));\n    };\n}\n\nexport default function getInjectors(store) {\n    checkStore(store);\n    return {\n        injectReducer: injectReducerFactory(store, true),\n    };\n}\n","import React from 'react';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\nconst InjectReducer = ({ key, reducer }) => {\n    const context = React.useContext(ReactReduxContext);\n\n    React.useEffect(() => {\n        getInjectors(context.store).injectReducer(key, reducer);\n    });\n};\n\nexport default InjectReducer;\n","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nexport const DAEMON = '@@saga-injector/daemon';\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\n","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\n\nimport checkStore from './checkStore';\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = (key) =>\n    invariant(isString(key) && !isEmpty(key), '(app/utils...) injectSaga: Expected `key` to be a non empty string');\n\nconst checkDescriptor = (descriptor) => {\n    const shape = {\n        saga: isFunction,\n        mode: (mode) => isString(mode) && allowedModes.includes(mode),\n    };\n    invariant(conformsTo(descriptor, shape), '(app/utils...) injectSaga: Expected a valid saga descriptor');\n};\n\nexport function injectSagaFactory(store, isValid) {\n    return function injectSaga(key, descriptor, args) {\n        if (!isValid) checkStore(store);\n\n        const newDescriptor = {\n            ...(descriptor || {}),\n            mode: descriptor.mode || DAEMON,\n        };\n        const { saga, mode } = newDescriptor;\n\n        checkKey(key);\n        checkDescriptor(newDescriptor);\n\n        let hasSaga = Reflect.has(store.injectedSagas, key);\n\n        if (process.env.NODE_ENV !== 'production') {\n            const oldDescriptor = store.injectedSagas[key];\n            // enable hot reloading of daemon and once-till-unmount sagas\n            if (hasSaga && oldDescriptor.saga !== saga) {\n                oldDescriptor.task.cancel();\n                hasSaga = false;\n            }\n        }\n\n        if (!hasSaga || (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)) {\n            /* eslint-disable no-param-reassign */\n            store.injectedSagas[key] = {\n                ...newDescriptor,\n                task: store.runSaga(saga, args),\n            };\n            /* eslint-enable no-param-reassign */\n        }\n    };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n    return function ejectSaga(key) {\n        if (!isValid) checkStore(store);\n\n        checkKey(key);\n\n        if (Reflect.has(store.injectedSagas, key)) {\n            const descriptor = store.injectedSagas[key];\n            if (descriptor.mode && descriptor.mode !== DAEMON) {\n                descriptor.task.cancel();\n                // Clean up in production; in development we need `descriptor.saga` for hot reloading\n                if (process.env.NODE_ENV === 'production') {\n                    // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n                    store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\n                }\n            }\n        }\n    };\n}\n\nexport default function getInjectors(store) {\n    checkStore(store);\n\n    return {\n        injectSaga: injectSagaFactory(store, true),\n        ejectSaga: ejectSagaFactory(store, true),\n    };\n}\n","import React from 'react';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './sagaInjectors';\n\nconst InjectSaga = ({ key, saga, mode }) => {\n    const context = React.useContext(ReactReduxContext);\n    React.useEffect(() => {\n        const injectors = getInjectors(context.store);\n        injectors.injectSaga(key, { saga, mode });\n\n        return () => {\n            injectors.ejectSaga(key);\n        };\n    });\n};\n\nexport default InjectSaga;\n","const request = (url) => {\n    const result = {};\n    return fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n            result.data = data;\n            return result;\n        })\n        .catch((error) => {\n            result.error = error;\n            return result;\n        });\n};\n\nexport default request;\n"],"names":["crudGetOneAction","key","payload","type","GET","crudGetAllAction","crudGetListAction","crudGetListSuccessAction","crudGetOneSuccessAction","crudGetAllSuccessAction","crudGetListFailureAction","crudGetOneFailureAction","crudGetAllFailureAction","crudGetResetAction","className","Header","showProgress","href","icon","faHouse","SearchField","role","faUser","defaultProps","onSearch","useState","value","setValue","onChange","event","target","placeholder","id","faSearch","KEY","ALL","FAILURE","SUCCESS","LIST","ONE","RESET","COIN","DETAIL","TOP10MARKETS","number","toString","BarChart","data","height","barConfig","tooltip","xAxisFormatterType","xAxisDataKey","disabled","_","map","pair","dataKey","color","fill","name","ResponsiveContainer","width","ComposedChart","XAxis","style","fontSize","fontWeight","tickFormatter","toLowerCase","padding","left","right","YAxis","dataFormatter","Legend","layout","verticalAlign","align","wrapperStyle","top","marginTop","transform","CartesianGrid","fillOpacity","horizontal","vertical","filter","Date","getMilliseconds","Math","random","Bar","stackId","stack","background","maxBarSize","Tooltip","getCoinDetail","getTop10MarketsForCoin","getCoinDetailSaga","getTop10MarketsForCoinSaga","action","URL","call","request","result","error","put","success","lodash","slice","takeLatest","KEYS","graphConfig","coinId","useParams","getCoinDetailsReducer","crudGetReducer","InjectReducer","reducer","InjectSaga","saga","getTop10MarketsReducer","useCrudGet","crudGetOne","crudGetOnePayload","crudGetOneLoading","crudGetOneSuccess","getTop10MarketByCoinId","crudGetAll","crudGetAllPayload","crudGetAllLoading","crudGetAllSuccess","top10Markets","setTop10Markets","coinDetail","setCoinDetail","useEffect","src","nameid","alt","symbol","rank","market_cap_usd","volume24","volume24_native","csupply","tsupply","faDollar","price_usd","price_btc","percent_change_1h","percent_change_24h","percent_change_7d","faChartSimple","selectGetData","state","getInitialState","dispatch","useDispatch","selectCrudGetListPayload","createSelector","getState","get","list","makeSelectCrudGetListPayload","selectCrudGetOnePayload","one","makeSelectCrudGetOnePayload","selectCrudGetAllPayload","all","makeSelectCrudGetAllPayload","selectCrudGetListFailure","failure","makeSelectCrudGetListFailure","selectCrudGetOneFailure","makeSelectCrudGetOneFailure","selectCrudGetAllFailure","makeSelectCrudGetAllFailure","selectCrudGetListSuccess","makeSelectCrudGetListSuccess","selectCrudGetOneSuccess","makeSelectCrudGetOneSuccess","selectCrudGetAllSuccess","makeSelectCrudGetAllSuccess","selectCrudGetListLoading","loading","makeSelectCrudGetListLoading","selectCrudGetAllLoading","makeSelectCrudGetAllLoading","selectCrudGetOneLoading","makeSelectCrudGetOneLoading","crudGetListPayload","useSelector","crudGetListSuccess","crudGetAllFailure","crudGetListFailure","crudGetOneFailure","crudGetListLoading","crudGetList","crudGetReset","reducerKey","produce","draft","checkStore","store","shape","isFunction","subscribe","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","injectReducerFactory","isValid","isString","isEmpty","Reflect","has","createReducer","context","React","ReactReduxContext","injectReducer","DAEMON","ONCE_TILL_UNMOUNT","allowedModes","checkKey","injectSagaFactory","descriptor","args","newDescriptor","mode","includes","checkDescriptor","hasSaga","task","ejectSagaFactory","cancel","injectors","injectSaga","ejectSaga","url","fetch","then","response","json","catch"],"sourceRoot":""}