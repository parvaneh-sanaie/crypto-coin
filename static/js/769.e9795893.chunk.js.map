{"version":3,"file":"static/js/769.e9795893.chunk.js","mappings":"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","sources":["actions/crud/get/index.js","components/ProgressBar/index.js","components/Header/index.js","components/SearchField/index.js","constants/crud/get/index.js","constants/index.js","containers/CoinList/keys.js","containers/CoinList/saga.js","utils/pagination.js","components/Pagination/index.js","containers/CoinList/index.js","selectors/crud/get/index.js","hooks/crud/get/useCrudGet.js","reducers/crud/get/index.js","utils/checkStore.js","utils/reducerInjectors.js","utils/injectReducer.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js","utils/request.js","../node_modules/@fortawesome/free-solid-svg-icons/faTable.js"],"sourcesContent":["import GET from '../../../constants';\n\nconst crudGetOneAction = (key, payload) => ({\n    key,\n    type: `${GET.ONE.KEY}${key}`,\n    payload,\n});\n\nconst crudGetAllAction = (key, payload) => ({\n    key,\n    type: `${GET.ALL.KEY}${key}`,\n    payload,\n});\n\nconst crudGetListAction = (key, payload) => ({\n    key,\n    type: `${GET.LIST.KEY}${key}`,\n    payload,\n});\n\nconst crudGetListSuccessAction = (key, payload) => ({\n    key,\n    type: `${GET.LIST.SUCCESS.KEY}${key}`,\n    payload,\n});\nconst crudGetOneSuccessAction = (key, payload) => ({\n    key,\n    type: `${GET.ONE.SUCCESS.KEY}${key}`,\n    payload,\n});\nconst crudGetAllSuccessAction = (key, payload) => ({\n    key,\n    type: `${GET.ALL.SUCCESS.KEY}${key}`,\n    payload,\n});\n\nconst crudGetListFailureAction = (key, payload) => ({\n    key,\n    type: `${GET.LIST.FAILURE.KEY}${key}`,\n    payload,\n});\n\nconst crudGetOneFailureAction = (key, payload) => ({\n    key,\n    type: `${GET.ONE.FAILURE.KEY}${key}`,\n    payload,\n});\n\nconst crudGetAllFailureAction = (key, payload) => ({\n    key,\n    type: `${GET.ALL.FAILURE.KEY}${key}`,\n    payload,\n});\n\nconst crudGetResetAction = (key) => ({\n    key,\n    type: `${GET.RESET.KEY}${key}`,\n});\nexport {\n    crudGetOneAction,\n    crudGetAllAction,\n    crudGetListAction,\n    crudGetListSuccessAction,\n    crudGetOneSuccessAction,\n    crudGetAllSuccessAction,\n    crudGetListFailureAction,\n    crudGetOneFailureAction,\n    crudGetAllFailureAction,\n    crudGetResetAction,\n};\n","import React from 'react';\nimport './styles.css';\n\nfunction ProgressBar() {\n    return (\n        <div data-testid=\"progressBar\" className=\"mw-100\">\n            <span className=\"progress-root\">\n                <span className=\"animated1\" />\n                <span className=\"animated2\" />\n            </span>\n        </div>\n    );\n}\nexport default ProgressBar;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-regular-svg-icons/faUser';\nimport { faHouse } from '@fortawesome/free-solid-svg-icons/faHouse';\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\nimport SearchField from '../SearchField';\nimport ProgressBar from '../ProgressBar';\n\nfunction Header({ showProgress }) {\n    return (\n        <div data-testid=\"Header\">\n            <nav data-testid=\"navbar\" className=\"navbar navbar-expand navbar-dark bg-dark\">\n                <a data-testid=\"homeLink\" className=\"navbar-brand ps-3\" href=\"/crypto-coin/\">\n                    <FontAwesomeIcon icon={faHouse} className=\"fa-fw me-2\" />\n                    Crypto Coin\n                </a>\n                <SearchField />\n                <ul data-testid=\"userProfileLink\" className=\"navbar-nav ms-auto ms-md-0 me-3 me-lg-4\">\n                    <li className=\"nav-item dropdown\">\n                        <a\n                            className=\"nav-link dropdown-toggle\"\n                            href=\"#\"\n                            role=\"button\"\n                            data-bs-toggle=\"dropdown\"\n                            aria-expanded=\"false\"\n                        >\n                            <FontAwesomeIcon icon={faUser} className=\"fa-fw\" />\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n            {showProgress && <ProgressBar />}\n        </div>\n    );\n}\nHeader.propTypes = {\n    showProgress: PropTypes.bool,\n};\nHeader.defaultProps = {\n    showProgress: false,\n};\nexport default Header;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons/faSearch';\n\nfunction SearchField({ onSearch }) {\n    const [value, setValue] = useState('');\n    const handleSearch = (event) => {\n        setValue(event.target.value);\n        onSearch(event.target.value);\n    };\n    return (\n        <form\n            data-testid=\"search-field-form\"\n            className=\"d-none d-md-inline-block form-inline ms-auto me-0 me-md-3 my-2 my-md-0\"\n        >\n            <div className=\"input-group\">\n                <input\n                    data-testid=\"search-field-input\"\n                    value={value}\n                    onChange={handleSearch}\n                    className=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"Search for...\"\n                    aria-label=\"Search for...\"\n                    aria-describedby=\"btnNavbarSearch\"\n                />\n                <button\n                    data-testid=\"search-field-button\"\n                    className=\"btn btn-primary\"\n                    id=\"btnNavbarSearch\"\n                    type=\"button\"\n                >\n                    <FontAwesomeIcon icon={faSearch} />\n                </button>\n            </div>\n        </form>\n    );\n}\nSearchField.propTypes = {\n    onSearch: PropTypes.func,\n};\nSearchField.defaultProps = {\n    onSearch: (value) => value,\n};\n\nexport default SearchField;\n","const KEY = `/CRUD/GET`;\n\nconst GET = {\n    ALL: {\n        KEY: `${KEY}/ALL/`,\n        FAILURE: { KEY: `${KEY}/ALL/FAILURE/` },\n        SUCCESS: { KEY: `${KEY}/ALL/SUCCESS/` },\n    },\n    LIST: {\n        KEY: `${KEY}/LIST/`,\n        FAILURE: { KEY: `${KEY}/LIST/FAILURE/` },\n        SUCCESS: { KEY: `${KEY}/LIST/SUCCESS/` },\n    },\n    ONE: {\n        KEY: `${KEY}/ONE/`,\n        FAILURE: { KEY: `${KEY}/ONE/FAILURE/` },\n        SUCCESS: { KEY: `${KEY}/ONE/SUCCESS/` },\n    },\n    RESET: {\n        KEY: `${KEY}/RESET/`,\n    },\n};\n\nexport default GET;\n","import GET from './crud/get';\n\nexport default GET;\n","const KEYS = {\n    COINS: {\n        LIST: `TICKERS`,\n        GLOBAL: `GLOBAL`,\n    },\n};\n\nexport default KEYS;\n","import { takeLatest, call, put } from 'redux-saga/effects';\n\nimport request from '../../utils/request';\nimport {\n    crudGetListFailureAction,\n    crudGetListSuccessAction,\n    crudGetAllFailureAction,\n    crudGetAllSuccessAction,\n} from '../../actions/crud/get';\n\nimport KEYS from './keys';\nimport GET from '../../constants';\n\nfunction* getList(action) {\n    try {\n        const { start, limit } = action.payload;\n        const URL = `https://api.coinlore.net/api/tickers/?start=${start}&limit=${limit}`;\n        const result = yield call(request, URL);\n\n        if (result.error) {\n            yield put(crudGetListFailureAction(action.key, { error: result.error }));\n        } else if (result.data) {\n            yield put(crudGetListSuccessAction(action.key, { data: result.data, success: true }));\n        }\n    } catch (error) {\n        yield put(crudGetListFailureAction(action.key, { error }));\n    }\n}\n\nfunction* getGlobalInfo(action) {\n    try {\n        const URL = `https://api.coinlore.net/api/global/`;\n        const result = yield call(request, URL);\n        if (result.error) {\n            yield put(crudGetAllFailureAction(action.key, { error: result.error }));\n        } else if (result.data) {\n            yield put(crudGetAllSuccessAction(action.key, { data: result.data, success: true }));\n        }\n    } catch (error) {\n        yield put(crudGetAllFailureAction(action.key, { error }));\n    }\n}\n\nexport function* getTickersSaga() {\n    yield takeLatest(`${GET.LIST.KEY}${KEYS.COINS.LIST}`, getList);\n}\n\nexport function* getGlobalInfoSaga() {\n    yield takeLatest(`${GET.ALL.KEY}${KEYS.COINS.GLOBAL}`, getGlobalInfo);\n}\n","const calculatePaginationRecords = ({ currentPage, maxDisplayPages, totalCount, size }) => {\n    const array = [];\n    const totalPages = Math.ceil(totalCount / size);\n    if (totalPages <= maxDisplayPages) {\n        for (let i = currentPage; i < currentPage + Math.ceil(totalPages / maxDisplayPages); i += 1) {\n            array.push(i);\n        }\n        return array;\n    }\n    let min = 0;\n    let max = 0;\n    let j = 0;\n    while (j < maxDisplayPages) {\n        if ((currentPage + j) % maxDisplayPages === 0 && !max) {\n            max = currentPage + j;\n        }\n        if ((currentPage - j) % maxDisplayPages === 1 && !min) {\n            min = currentPage - j;\n        }\n        j += 1;\n    }\n    for (let i = min; i <= max; i += 1) {\n        array.push(i);\n    }\n    return array;\n};\n\nexport default calculatePaginationRecords;\n","import React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PropTypes from 'prop-types';\n\nimport calculatePaginationRecords from '../../utils/pagination';\n\nfunction Pagination(props) {\n    const { currentPage, size, totalCount, onPageChange, onPageSizeChange, className } = props;\n\n    const MAX_DISPLAY_PAGES = 6;\n    const [page, setPage] = useState(currentPage);\n    const [pageSize, setPageSize] = useState(size);\n    const [totalPages, setTotalPages] = useState(Math.floor(totalCount / size));\n    const [displayPages, setDisplayPages] = useState(\n        calculatePaginationRecords({ currentPage, maxDisplayPages: MAX_DISPLAY_PAGES, totalCount, size }),\n    );\n\n    useEffect(() => {\n        setDisplayPages(\n            calculatePaginationRecords({\n                currentPage: page,\n                maxDisplayPages: MAX_DISPLAY_PAGES,\n                totalCount,\n                size: pageSize,\n            }),\n        );\n    }, [totalCount, page, pageSize, totalPages]);\n\n    const handlePageChange = (pageNumber) => {\n        onPageChange(pageNumber);\n        setPage(pageNumber);\n    };\n\n    const handleClickPreviousPage = () => {\n        onPageChange(page - 1);\n        setPage(page - 1);\n    };\n\n    const handleClickNextPage = () => {\n        if (page - 1 <= totalPages) {\n            onPageChange(page + 1);\n            setPage(page + 1);\n        }\n    };\n\n    const handleChangePageSize = (event) => {\n        const newPageSize = Number(event.target.value);\n        onPageSizeChange(newPageSize);\n        setPageSize(newPageSize);\n        setTotalPages(Math.ceil(totalCount / newPageSize));\n        setPage(1);\n    };\n    return (\n        <div data-testid=\"pagination\" className={`container flex-fill ${className}`}>\n            <div className=\"row\">\n                <div className=\"col-xl-3 col-md-2 d-flex flex-fill justify-content-start\">\n                    <label data-testid=\"pagination-page-info\">\n                        {(page - 1) * pageSize + 1}-{totalCount < pageSize ? totalCount : page * pageSize} of{' '}\n                        {totalCount}\n                    </label>\n                </div>\n                <div className=\"col-xl-6 col-md-8 d-flex flex-fill justify-content-center\">\n                    <nav>\n                        <ul data-testid=\"pagination-page-list\" className=\"pagination\">\n                            <li\n                                data-testid=\"pagination-previous-link\"\n                                className={`page-item ${page <= 1 ? 'disabled' : ''}`}\n                            >\n                                <button type=\"button\" className=\"page-link\" onClick={handleClickPreviousPage}>\n                                    <span aria-hidden=\"true\">&laquo;</span>\n                                </button>\n                            </li>\n                            {displayPages.map((pageNumber) => {\n                                const key = new Date().getMilliseconds() + Math.random();\n                                return (\n                                    <li className=\"page-item\" key={`${key}`}>\n                                        {pageNumber !== page && (\n                                            <button\n                                                type=\"button\"\n                                                className=\"page-link\"\n                                                onClick={() => handlePageChange(pageNumber)}\n                                                data-page={pageNumber}\n                                                key={`${key}${pageNumber}`}\n                                            >\n                                                <span aria-hidden=\"true\">{pageNumber}</span>\n                                            </button>\n                                        )}\n                                        {pageNumber === page && (\n                                            <span key={`${key}${pageNumber}`} className=\"page-link active\">\n                                                {pageNumber}\n                                            </span>\n                                        )}\n                                    </li>\n                                );\n                            })}\n                            <li\n                                data-testid=\"pagination-next-link\"\n                                className={`page-item ${page >= totalPages || totalCount < pageSize ? 'disabled' : ''}`}\n                            >\n                                <button type=\"button\" className=\"page-link\" onClick={handleClickNextPage}>\n                                    <span aria-hidden=\"true\">&raquo;</span>\n                                </button>\n                            </li>\n                        </ul>\n                    </nav>\n                </div>\n                <div className=\"col-xl-3 col-md-2 d-flex flex-fill justify-content-end\">\n                    <label>\n                        Rows per page:\n                        <select\n                            data-testid=\"pagination-page-size-records\"\n                            value={pageSize}\n                            onChange={handleChangePageSize}\n                        >\n                            <option value={5}>5</option>\n                            <option value={10}>10</option>\n                            <option value={20}>20</option>\n                            <option value={50}>50</option>\n                            <option value={100}>100</option>\n                        </select>\n                    </label>\n                </div>\n            </div>\n        </div>\n    );\n}\nPagination.propTypes = {\n    currentPage: PropTypes.number,\n    size: PropTypes.number,\n    totalCount: PropTypes.number,\n    onPageChange: PropTypes.func,\n    onPageSizeChange: PropTypes.func,\n    className: PropTypes.string,\n};\nPagination.defaultProps = {\n    size: 10,\n    currentPage: 1,\n    totalCount: 1,\n    onPageChange: (pageNumber) => pageNumber,\n    onPageSizeChange: (size) => size,\n    className: ``,\n};\nexport default Pagination;\n","import React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTable } from '@fortawesome/free-solid-svg-icons/faTable';\n\nimport KEYS from './keys';\n\nimport crudGetReducer from '../../reducers/crud/get';\nimport { InjectReducer, InjectSaga } from '../../utils';\nimport useCrudGet from '../../hooks/crud/get/useCrudGet';\nimport { getTickersSaga } from './saga';\nimport Pagination from '../../components/Pagination';\nimport Header from '../../components/Header';\nimport SearchField from '../../components/SearchField';\n\nfunction CoinList() {\n    const getTickersReducer = crudGetReducer(KEYS.COINS.LIST);\n    InjectReducer({ key: KEYS.COINS.LIST, reducer: getTickersReducer });\n    InjectSaga({ key: KEYS.COINS.LIST, saga: getTickersSaga });\n\n    const { crudGetList, crudGetListPayload, crudGetListLoading, crudGetListFailure, crudGetListSuccess } = useCrudGet(\n        KEYS.COINS.LIST,\n    );\n\n    const [pageNumber, setPageNumber] = useState(1);\n    const [pageSize, setPageSize] = useState(5);\n    const [coinList, setCoinList] = useState(null);\n    const [totalCount, setTotalCount] = useState(0);\n\n    const escapeRegExp = (value) => value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n\n    useEffect(() => {\n        if (crudGetListPayload == null && !crudGetListLoading && !crudGetListFailure) {\n            crudGetList({ start: (pageNumber - 1) * pageSize, limit: pageSize });\n        }\n    }, [crudGetListLoading, crudGetList, crudGetListPayload, crudGetListFailure, pageNumber, pageSize]);\n\n    useEffect(() => {\n        if (crudGetListSuccess) {\n            setCoinList(crudGetListPayload.data.data);\n            setTotalCount(crudGetListPayload.data.info.coins_num);\n        }\n    }, [crudGetListPayload, crudGetListSuccess]);\n\n    const handlePageChange = (page) => {\n        setPageNumber(page);\n        crudGetList({ start: (page - 1) * pageSize, limit: pageSize });\n    };\n\n    const handlePageSizeChange = (size) => {\n        setPageSize(size);\n        setPageNumber(1);\n        crudGetList({ start: 0, limit: size });\n    };\n\n    const handleSearchInDataTable = (value) => {\n        const searchRegex = new RegExp(escapeRegExp(value), 'i');\n        if (value.length === 0) {\n            setCoinList(crudGetListPayload.data.data);\n            setTotalCount(crudGetListPayload.data.info.coins_num);\n            return;\n        }\n        const filteredRows = crudGetListPayload.data.data.filter((row) =>\n            Object.keys(row).some((field) => {\n                if (row[field]) {\n                    return searchRegex.test(row[field].toString());\n                }\n                return null;\n            }),\n        );\n        setCoinList(filteredRows);\n        setTotalCount(filteredRows.length);\n    };\n\n    return (\n        <div data-testid=\"CoinList\">\n            <Header showProgress={crudGetListLoading} />\n            {crudGetListSuccess && coinList && (\n                <div data-testid=\"page-container\" className=\"container-fluid py-2 px-4 small\">\n                    <div className=\"card mb-2\">\n                        <div className=\"card-header\">\n                            <FontAwesomeIcon icon={faTable} className=\"me-1\" />\n                            Coins\n                        </div>\n                        <div className=\"text-end mt-1\">\n                            <SearchField onSearch={handleSearchInDataTable} />\n                        </div>\n                        <div\n                            data-testid=\"table-container\"\n                            className=\"card-body table-responsive px-5 m-1\"\n                            style={{ maxHeight: '300px' }}\n                        >\n                            <table className=\"overflow-scroll table table-sm table-hover table-bordered table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>Coin</th>\n                                        <th>Price</th>\n                                        <th>1h</th>\n                                        <th>24h</th>\n                                        <th>7d</th>\n                                        <th>Market Cap</th>\n                                    </tr>\n                                </thead>\n                                <tbody data-testid=\"table-body\">\n                                    {coinList.map((item) => {\n                                        const key = new Date().getMilliseconds() + Math.random();\n                                        return (\n                                            <tr key={`${key}`}>\n                                                <td key={`${key}_rank`}>{item.rank}</td>\n                                                <td key={`${key}_name`}>\n                                                    <div className=\"row d-flex\">\n                                                        <img\n                                                            style={{ height: '25px', maxWidth: 'fit-content' }}\n                                                            alt={item.name}\n                                                            className=\"col-2 rounded w-auto pe-0\"\n                                                            src={`https://www.coinlore.com/img/25x25/${item.nameid}.png`}\n                                                        />\n\n                                                        <a\n                                                            className=\"text-decoration-none col-10\"\n                                                            href={`/crypto-coin/coins/${item.id}`}\n                                                            key={`${key}_detail`}\n                                                        >\n                                                            <div className=\"text-black fw-bolder\"> {item.name}</div>\n                                                            <div className=\"small text-primary\">{item.symbol}</div>\n                                                        </a>\n                                                    </div>\n                                                </td>\n                                                <td key={`${key}_price`} className=\"fs-6\">\n                                                    ${item.price_usd}\n                                                </td>\n                                                <td\n                                                    key={`${key}_percent_1h`}\n                                                    className={\n                                                        item.percent_change_1h > 0 ? `text-success` : `text-danger`\n                                                    }\n                                                >\n                                                    {item.percent_change_1h}%\n                                                </td>\n                                                <td\n                                                    key={`${key}_percent_24h`}\n                                                    className={\n                                                        item.percent_change_24h > 0 ? `text-success` : `text-danger`\n                                                    }\n                                                >\n                                                    <strong>{item.percent_change_24h}%</strong>\n                                                </td>\n                                                <td\n                                                    key={`${key}_percent_7d`}\n                                                    className={\n                                                        item.percent_change_7d > 0 ? `text-success` : `text-danger`\n                                                    }\n                                                >\n                                                    {item.percent_change_7d}%\n                                                </td>\n                                                <td key={`${key}_market`}>${item.market_cap_usd}</td>\n                                            </tr>\n                                        );\n                                    })}\n                                    {coinList.length === 0 && (\n                                        <tr>\n                                            <td className=\"text-secondary text-center\" colSpan={7}>\n                                                No results Found.\n                                            </td>\n                                        </tr>\n                                    )}\n                                </tbody>\n                            </table>\n                        </div>\n                        <Pagination\n                            currentPage={pageNumber}\n                            size={pageSize}\n                            totalCount={totalCount}\n                            onPageChange={handlePageChange}\n                            onPageSizeChange={handlePageSizeChange}\n                        />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default CoinList;\n","import { createSelector } from 'reselect';\nimport { getInitialState } from '../../../reducers/crud/get';\n\nconst selectGetData = (state, key) => state[key] || getInitialState;\n\nconst makeSelectCrudGetListFailure = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.list.failure,\n    );\n\nconst makeSelectCrudGetOneFailure = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.one.failure,\n    );\n\nconst makeSelectCrudGetAllFailure = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.all.failure,\n    );\n\nconst makeSelectCrudGetListSuccess = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.list.success,\n    );\n\nconst makeSelectCrudGetOneSuccess = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.one.success,\n    );\n\nconst makeSelectCrudGetAllSuccess = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.all.success,\n    );\n\nconst makeSelectCrudGetListLoading = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.list.loading,\n    );\n\nconst makeSelectCrudGetAllLoading = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.all.loading,\n    );\n\nconst makeSelectCrudGetOneLoading = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.one.loading,\n    );\n\nconst makeSelectCrudGetListPayload = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.list.payload,\n    );\n\nconst makeSelectCrudGetOnePayload = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.one.payload,\n    );\n\nconst makeSelectCrudGetAllPayload = (key) =>\n    createSelector(\n        (state) => selectGetData(state, key),\n        (getState) => getState.get.all.payload,\n    );\n\nexport {\n    makeSelectCrudGetListFailure,\n    makeSelectCrudGetOneFailure,\n    makeSelectCrudGetAllFailure,\n    makeSelectCrudGetListSuccess,\n    makeSelectCrudGetOneSuccess,\n    makeSelectCrudGetAllSuccess,\n    makeSelectCrudGetListLoading,\n    makeSelectCrudGetAllLoading,\n    makeSelectCrudGetOneLoading,\n    makeSelectCrudGetListPayload,\n    makeSelectCrudGetOnePayload,\n    makeSelectCrudGetAllPayload,\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport {\n    makeSelectCrudGetListPayload,\n    makeSelectCrudGetOnePayload,\n    makeSelectCrudGetAllPayload,\n    makeSelectCrudGetListFailure,\n    makeSelectCrudGetOneFailure,\n    makeSelectCrudGetAllFailure,\n    makeSelectCrudGetListSuccess,\n    makeSelectCrudGetOneSuccess,\n    makeSelectCrudGetAllSuccess,\n    makeSelectCrudGetListLoading,\n    makeSelectCrudGetAllLoading,\n    makeSelectCrudGetOneLoading,\n} from '../../../selectors/crud/get';\n\nimport { crudGetOneAction, crudGetAllAction, crudGetListAction, crudGetResetAction } from '../../../actions/crud/get';\n\nfunction useCrudGet(key) {\n    const dispatch = useDispatch();\n\n    const selectCrudGetListPayload = makeSelectCrudGetListPayload(key);\n    const selectCrudGetOnePayload = makeSelectCrudGetOnePayload(key);\n    const selectCrudGetAllPayload = makeSelectCrudGetAllPayload(key);\n    const selectCrudGetListFailure = makeSelectCrudGetListFailure(key);\n    const selectCrudGetOneFailure = makeSelectCrudGetOneFailure(key);\n    const selectCrudGetAllFailure = makeSelectCrudGetAllFailure(key);\n    const selectCrudGetListSuccess = makeSelectCrudGetListSuccess(key);\n    const selectCrudGetOneSuccess = makeSelectCrudGetOneSuccess(key);\n    const selectCrudGetAllSuccess = makeSelectCrudGetAllSuccess(key);\n    const selectCrudGetListLoading = makeSelectCrudGetListLoading(key);\n    const selectCrudGetAllLoading = makeSelectCrudGetAllLoading(key);\n    const selectCrudGetOneLoading = makeSelectCrudGetOneLoading(key);\n\n    const crudGetListPayload = useSelector(selectCrudGetListPayload);\n    const crudGetAllPayload = useSelector(selectCrudGetAllPayload);\n    const crudGetOnePayload = useSelector(selectCrudGetOnePayload);\n    const crudGetAllSuccess = useSelector(selectCrudGetAllSuccess);\n    const crudGetListSuccess = useSelector(selectCrudGetListSuccess);\n    const crudGetOneSuccess = useSelector(selectCrudGetOneSuccess);\n    const crudGetAllFailure = useSelector(selectCrudGetAllFailure);\n    const crudGetListFailure = useSelector(selectCrudGetListFailure);\n    const crudGetOneFailure = useSelector(selectCrudGetOneFailure);\n    const crudGetListLoading = useSelector(selectCrudGetListLoading);\n    const crudGetAllLoading = useSelector(selectCrudGetAllLoading);\n    const crudGetOneLoading = useSelector(selectCrudGetOneLoading);\n\n    const crudGetOne = (payload) => {\n        dispatch(crudGetOneAction(key, payload));\n    };\n    const crudGetAll = (payload) => {\n        dispatch(crudGetAllAction(key, payload));\n    };\n    const crudGetList = (payload) => {\n        dispatch(crudGetListAction(key, payload));\n    };\n    const crudGetReset = () => {\n        dispatch(crudGetResetAction(key));\n    };\n\n    return {\n        crudGetOne,\n        crudGetAll,\n        crudGetList,\n        crudGetReset,\n        crudGetOnePayload,\n        crudGetListPayload,\n        crudGetAllPayload,\n        crudGetOneLoading,\n        crudGetAllLoading,\n        crudGetListLoading,\n        crudGetOneFailure,\n        crudGetAllFailure,\n        crudGetListFailure,\n        crudGetOneSuccess,\n        crudGetAllSuccess,\n        crudGetListSuccess,\n    };\n}\n\nexport default useCrudGet;\n","import produce from 'immer';\nimport GET from '../../../constants/crud/get';\n\nexport const getInitialState = {\n    get: {\n        all: {\n            payload: null,\n            loading: false,\n            success: false,\n            failure: false,\n        },\n        list: {\n            payload: null,\n            loading: false,\n            success: false,\n            failure: false,\n        },\n        one: {\n            payload: null,\n            loading: false,\n            success: false,\n            failure: false,\n        },\n    },\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst crudGetReducer =\n    (reducerKey = '') =>\n    // eslint-disable-next-line default-param-last\n    (state = getInitialState, action) => {\n        const { key } = action;\n        if (key !== reducerKey) return state;\n        return produce(state, (draft) => {\n            switch (action.type) {\n                case `${GET.ONE.KEY}${key}`: {\n                    draft.get.one.payload = action.payload;\n                    draft.get.one.loading = true;\n                    draft.get.one.success = false;\n                    draft.get.one.failure = false;\n                    break;\n                }\n                case `${GET.ALL.KEY}${key}`: {\n                    draft.get.all.payload = action.payload;\n                    draft.get.all.loading = true;\n                    draft.get.all.success = false;\n                    draft.get.all.failure = false;\n                    break;\n                }\n                case `${GET.LIST.KEY}${key}`: {\n                    draft.get.list.payload = action.payload;\n                    draft.get.list.loading = true;\n                    draft.get.list.success = false;\n                    draft.get.list.failure = false;\n                    break;\n                }\n                case `${GET.LIST.SUCCESS.KEY}${key}`: {\n                    draft.get.list.payload = action.payload;\n                    draft.get.list.success = true;\n                    draft.get.list.loading = false;\n                    draft.get.list.failure = false;\n                    break;\n                }\n                case `${GET.ONE.SUCCESS.KEY}${key}`: {\n                    draft.get.one.payload = action.payload;\n                    draft.get.one.success = true;\n                    draft.get.one.loading = false;\n                    draft.get.one.failure = false;\n                    break;\n                }\n                case `${GET.ALL.SUCCESS.KEY}${key}`: {\n                    draft.get.all.payload = action.payload;\n                    draft.get.all.success = true;\n                    draft.get.all.loading = false;\n                    draft.get.all.failure = false;\n                    break;\n                }\n                case `${GET.LIST.FAILURE.KEY}${key}`: {\n                    draft.get.list.payload = action.payload;\n                    draft.get.list.failure = true;\n                    draft.get.list.loading = false;\n                    draft.get.list.success = false;\n                    break;\n                }\n                case `${GET.ONE.FAILURE.KEY}${key}`: {\n                    draft.get.one.payload = action.payload;\n                    draft.get.one.failure = true;\n                    draft.get.one.loading = false;\n                    draft.get.one.success = false;\n                    break;\n                }\n                case `${GET.ALL.FAILURE.KEY}${key}`: {\n                    draft.get.all.payload = action.payload;\n                    draft.get.all.failure = true;\n                    draft.get.all.loading = false;\n                    draft.get.all.success = false;\n                    break;\n                }\n                case `${GET.RESET.KEY}${key}`: {\n                    draft.get.all.payload = null;\n                    draft.get.all.failure = false;\n                    draft.get.all.loading = false;\n                    draft.get.all.success = false;\n\n                    draft.get.list.payload = null;\n                    draft.get.list.failure = false;\n                    draft.get.list.loading = false;\n                    draft.get.list.success = false;\n\n                    draft.get.one.payload = null;\n                    draft.get.one.failure = false;\n                    draft.get.one.loading = false;\n                    draft.get.one.success = false;\n                    break;\n                }\n            }\n        });\n    };\n\nexport default crudGetReducer;\n","import { conformsTo, isFunction, isObject } from 'lodash';\nimport invariant from 'invariant';\n\n/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n    const shape = {\n        dispatch: isFunction,\n        subscribe: isFunction,\n        getState: isFunction,\n        replaceReducer: isFunction,\n        runSaga: isFunction,\n        injectedReducers: isObject,\n        injectedSagas: isObject,\n    };\n    invariant(conformsTo(store, shape), '(app/utils...) injectors: Expected a valid redux store');\n}\n","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\nimport checkStore from './checkStore';\nimport createReducer from './rootReducer';\n\nexport function injectReducerFactory(store, isValid) {\n    return function injectReducer(key, reducer) {\n        if (!isValid) checkStore(store);\n\n        invariant(\n            isString(key) && !isEmpty(key) && isFunction(reducer),\n            '(src/utils...) injectReducer: Expected `reducer` to be a reducer function',\n        );\n\n        // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n        if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\n\n        store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n        store.replaceReducer(createReducer(store.injectedReducers));\n    };\n}\n\nexport default function getInjectors(store) {\n    checkStore(store);\n    return {\n        injectReducer: injectReducerFactory(store, true),\n    };\n}\n","import React from 'react';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\nconst InjectReducer = ({ key, reducer }) => {\n    const context = React.useContext(ReactReduxContext);\n\n    React.useEffect(() => {\n        getInjectors(context.store).injectReducer(key, reducer);\n    });\n};\n\nexport default InjectReducer;\n","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nexport const DAEMON = '@@saga-injector/daemon';\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\n","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\n\nimport checkStore from './checkStore';\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = (key) =>\n    invariant(isString(key) && !isEmpty(key), '(app/utils...) injectSaga: Expected `key` to be a non empty string');\n\nconst checkDescriptor = (descriptor) => {\n    const shape = {\n        saga: isFunction,\n        mode: (mode) => isString(mode) && allowedModes.includes(mode),\n    };\n    invariant(conformsTo(descriptor, shape), '(app/utils...) injectSaga: Expected a valid saga descriptor');\n};\n\nexport function injectSagaFactory(store, isValid) {\n    return function injectSaga(key, descriptor, args) {\n        if (!isValid) checkStore(store);\n\n        const newDescriptor = {\n            ...(descriptor || {}),\n            mode: descriptor.mode || DAEMON,\n        };\n        const { saga, mode } = newDescriptor;\n\n        checkKey(key);\n        checkDescriptor(newDescriptor);\n\n        let hasSaga = Reflect.has(store.injectedSagas, key);\n\n        if (process.env.NODE_ENV !== 'production') {\n            const oldDescriptor = store.injectedSagas[key];\n            // enable hot reloading of daemon and once-till-unmount sagas\n            if (hasSaga && oldDescriptor.saga !== saga) {\n                oldDescriptor.task.cancel();\n                hasSaga = false;\n            }\n        }\n\n        if (!hasSaga || (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)) {\n            /* eslint-disable no-param-reassign */\n            store.injectedSagas[key] = {\n                ...newDescriptor,\n                task: store.runSaga(saga, args),\n            };\n            /* eslint-enable no-param-reassign */\n        }\n    };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n    return function ejectSaga(key) {\n        if (!isValid) checkStore(store);\n\n        checkKey(key);\n\n        if (Reflect.has(store.injectedSagas, key)) {\n            const descriptor = store.injectedSagas[key];\n            if (descriptor.mode && descriptor.mode !== DAEMON) {\n                descriptor.task.cancel();\n                // Clean up in production; in development we need `descriptor.saga` for hot reloading\n                if (process.env.NODE_ENV === 'production') {\n                    // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n                    store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\n                }\n            }\n        }\n    };\n}\n\nexport default function getInjectors(store) {\n    checkStore(store);\n\n    return {\n        injectSaga: injectSagaFactory(store, true),\n        ejectSaga: ejectSagaFactory(store, true),\n    };\n}\n","import React from 'react';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './sagaInjectors';\n\nconst InjectSaga = ({ key, saga, mode }) => {\n    const context = React.useContext(ReactReduxContext);\n    React.useEffect(() => {\n        const injectors = getInjectors(context.store);\n        injectors.injectSaga(key, { saga, mode });\n\n        return () => {\n            injectors.ejectSaga(key);\n        };\n    });\n};\n\nexport default InjectSaga;\n","const request = (url) => {\n    const result = {};\n    return fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n            result.data = data;\n            return result;\n        })\n        .catch((error) => {\n            result.error = error;\n            return result;\n        });\n};\n\nexport default request;\n","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar prefix = 'fas';\nvar iconName = 'table';\nvar width = 512;\nvar height = 512;\nvar aliases = [];\nvar unicode = 'f0ce';\nvar svgPathData = 'M64 256V160H224v96H64zm0 64H224v96H64V320zm224 96V320H448v96H288zM448 256H288V160H448v96zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64z';\n\nexports.definition = {\n  prefix: prefix,\n  iconName: iconName,\n  icon: [\n    width,\n    height,\n    aliases,\n    unicode,\n    svgPathData\n  ]};\n\nexports.faTable = exports.definition;\nexports.prefix = prefix;\nexports.iconName = iconName;\nexports.width = width;\nexports.height = height;\nexports.ligatures = aliases;\nexports.unicode = unicode;\nexports.svgPathData = svgPathData;\nexports.aliases = aliases;"],"names":["crudGetOneAction","key","payload","type","GET","crudGetAllAction","crudGetListAction","crudGetListSuccessAction","crudGetOneSuccessAction","crudGetAllSuccessAction","crudGetListFailureAction","crudGetOneFailureAction","crudGetAllFailureAction","crudGetResetAction","className","Header","showProgress","href","icon","faHouse","SearchField","role","faUser","defaultProps","onSearch","useState","value","setValue","onChange","event","target","placeholder","id","faSearch","KEY","ALL","FAILURE","SUCCESS","LIST","ONE","RESET","COINS","GLOBAL","getList","getTickersSaga","action","start","limit","URL","call","request","result","error","put","data","success","takeLatest","KEYS","currentPage","maxDisplayPages","totalCount","size","array","totalPages","Math","ceil","i","push","min","max","j","Pagination","props","onPageChange","onPageSizeChange","page","setPage","pageSize","setPageSize","floor","setTotalPages","calculatePaginationRecords","displayPages","setDisplayPages","useEffect","onClick","map","pageNumber","Date","getMilliseconds","random","handlePageChange","newPageSize","Number","getTickersReducer","crudGetReducer","InjectReducer","reducer","InjectSaga","saga","useCrudGet","crudGetList","crudGetListPayload","crudGetListLoading","crudGetListFailure","crudGetListSuccess","setPageNumber","coinList","setCoinList","setTotalCount","info","coins_num","faTable","searchRegex","RegExp","replace","escapeRegExp","length","filteredRows","filter","row","Object","keys","some","field","test","toString","style","maxHeight","item","rank","height","maxWidth","alt","name","src","nameid","symbol","price_usd","percent_change_1h","percent_change_24h","percent_change_7d","market_cap_usd","colSpan","selectGetData","state","getInitialState","dispatch","useDispatch","selectCrudGetListPayload","createSelector","getState","get","list","makeSelectCrudGetListPayload","selectCrudGetOnePayload","one","makeSelectCrudGetOnePayload","selectCrudGetAllPayload","all","makeSelectCrudGetAllPayload","selectCrudGetListFailure","failure","makeSelectCrudGetListFailure","selectCrudGetOneFailure","makeSelectCrudGetOneFailure","selectCrudGetAllFailure","makeSelectCrudGetAllFailure","selectCrudGetListSuccess","makeSelectCrudGetListSuccess","selectCrudGetOneSuccess","makeSelectCrudGetOneSuccess","selectCrudGetAllSuccess","makeSelectCrudGetAllSuccess","selectCrudGetListLoading","loading","makeSelectCrudGetListLoading","selectCrudGetAllLoading","makeSelectCrudGetAllLoading","selectCrudGetOneLoading","makeSelectCrudGetOneLoading","useSelector","crudGetAllPayload","crudGetOnePayload","crudGetAllSuccess","crudGetOneSuccess","crudGetAllFailure","crudGetOneFailure","crudGetAllLoading","crudGetOne","crudGetAll","crudGetReset","crudGetOneLoading","reducerKey","produce","draft","checkStore","store","shape","isFunction","subscribe","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","injectReducerFactory","isValid","isString","isEmpty","Reflect","has","createReducer","context","React","ReactReduxContext","injectReducer","DAEMON","ONCE_TILL_UNMOUNT","allowedModes","checkKey","injectSagaFactory","descriptor","args","newDescriptor","mode","includes","checkDescriptor","hasSaga","task","ejectSagaFactory","cancel","injectors","injectSaga","ejectSaga","url","fetch","then","response","json","catch","iconName","aliases","unicode","svgPathData","exports","prefix"],"sourceRoot":""}